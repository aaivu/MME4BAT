# -*- coding: utf-8 -*-
"""multimodel runtime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HMHvnKxsSdNt23LoSvqo-lvj5WwyslK_
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime,date
from google.colab import files

import xgboost as xgb
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

from google.colab import drive
drive.mount('/content/drive')

path= '/content/drive/Shareddrives/MSc - Shiveswarran/Processed data/Nine_months_data/bus_running_times_feature_added_all.csv'
run_times = pd.read_csv(path)

run_times['segment'].value_counts()

path= '/content/drive/Shareddrives/MSc - Shiveswarran/Processed data/Nine_months_data/bus_stop_times_feature_added_all.csv'

dwell_times = pd.read_csv(path)

df = dwell_times

df = df.loc[(df['time_of_day']>5.45) & (df['time_of_day']<19)]

df1 = df[df['direction']==1]

test1 = df1[df1['week_no']>16]
train1 = df1[df1['week_no']<17]

X = df1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
y = df1[['dwell_time_in_seconds']]

import xgboost as xg
xgb= xg.XGBRegressor(n_estimators = 100)
scores = cross_val_score(xgb, X, y, scoring='r2', cv=KFold(n_splits=10,shuffle=False))
rmse = cross_val_score(xgb, X, y, scoring='neg_mean_squared_error', cv=KFold(n_splits=10,shuffle=False))
mae = cross_val_score(xgb, X, y, scoring='neg_mean_absolute_error', cv=KFold(n_splits=10,shuffle=False))
rmse = np.sqrt(list(-rmse))
mae = list(-mae)
xgb_r2 = scores.mean()
xgb_rmse = rmse.mean()
xgb_mae = mae
print('xgb_r2 =' + str(xgb_r2))
print('xgb_rmse =' + str(xgb_rmse))
print('xgb_mae =' + str(xgb_mae))

import xgboost as xgb
xgb=  xgb.XGBRegressor(colsample_bytree = 0.3, learning_rate = 0.1,max_depth = 5, alpha = 10, n_estimators = 1000)

Xtrain = train1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
ytrain = train1[['dwell_time_in_seconds']]

Xtest = test1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
ytest = test1[['dwell_time_in_seconds']]

xgb.fit(Xtrain,ytrain)
pred_xg = xgb.predict(Xtest) 
rmse = np.sqrt(mean_squared_error(ytest, pred_xg)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_xg)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_xg)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_xg)
print("r2 (1): %f" % (r2))

pred_xg

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor(n_estimators = 100, random_state = 0)

Xtrain = train1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
ytrain = train1[['dwell_time_in_seconds']]

Xtest = test1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
ytest = test1[['dwell_time_in_seconds']]

rfr.fit(Xtrain,ytrain)
pred_rf = rfr.predict(Xtest) 
rmse = np.sqrt(mean_squared_error(ytest, pred_rf)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_rf)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_rf)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_rf)
print("r2 (1): %f" % (r2))

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

Xtrain = train1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
ytrain = train1[['dwell_time_in_seconds']]

Xtest = test1[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday']]
ytest = test1[['dwell_time_in_seconds']]

lr.fit(Xtrain,ytrain)
pred_lr = lr.predict(Xtest) 
rmse = np.sqrt(mean_squared_error(ytest, pred_lr)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_lr)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_lr)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_lr)
print("r2 (1): %f" % (r2))

pred_lr = pred_lr.flatten()
pred_lr

test1.reset_index(drop = True, inplace = True)

pred_xg = pd.Series(pred_xg, name='XGBoost')
pred_rf = pd.Series(pred_rf, name='Random forest')
pred_lr = pd.Series(pred_lr, name='Linear Reg')

pred =test1.merge(pred_xg,left_index=True, right_index=True)
pred =pred.merge(pred_rf,left_index=True, right_index=True)
pred =pred.merge(pred_lr,left_index=True, right_index=True)

pred_dwell = pred

pred_dwell

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

df = run_times

df = df.loc[(df['time_of_day']>=6) & (df['time_of_day']<19)]

df1 = df[df['direction']==1]

test1 = df1[df1['week_no']>=36]
train1 = df1[df1['week_no']<36]

X = df[['deviceid','segment','day_of_week','length','weekday/end','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip', 'holiday']]

y = df[['run_time_in_seconds']]

from sklearn import linear_model
lr = linear_model.LinearRegression()
scores = cross_val_score(lr, X, y, scoring='r2', cv=KFold(n_splits=10,shuffle=False )) # shuffle=False
rmse = cross_val_score(lr, X, y, scoring='neg_mean_squared_error', cv=KFold(n_splits=10,shuffle=False)) # 
rmse = np.sqrt(list(-rmse))
lr_r2 = scores.mean()
lr_rmse = rmse.mean()

print('lr_r2 =' + str(lr_r2))
print('lr_rmse =' + str(lr_rmse))

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor(n_estimators = 100,max_depth = 5, random_state = 42)
scores = cross_val_score(rfr, X, y, scoring='r2', cv=KFold(n_splits=10,shuffle=False)) #, 
rmse = cross_val_score(rfr, X, y, scoring='neg_mean_squared_error', cv=KFold(n_splits=10,shuffle=False)) #, 
rmse = np.sqrt(list(-rmse))
rfr_r2 = scores.mean()
rfr_rmse = rmse.mean()

print('rfr_r2 =' + str(rfr_r2))
print('rfr_rmse =' + str(rfr_rmse))

import xgboost as xg
xgb= xg.XGBRegressor(n_estimators = 100)
scores = cross_val_score(xgb, X, y, scoring='r2', cv=KFold(n_splits=10,shuffle=False))
rmse = cross_val_score(xgb, X, y, scoring='neg_mean_squared_error', cv=KFold(n_splits=10,shuffle=False))
rmse = np.sqrt(list(-rmse))
xgb_r2 = scores.mean()
xgb_rmse = rmse.mean()

print('xgb_r2 =' + str(xgb_r2))
print('xgb_rmse =' + str(xgb_rmse))

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor(random_state=0)
scores = cross_val_score(dt, X, y, scoring='r2', cv=KFold(n_splits=10,shuffle=False)) 
rmse = cross_val_score(dt, X, y, scoring='neg_mean_squared_error', cv=KFold(n_splits=10,shuffle=False)) 
rmse = np.sqrt(list(-rmse))
dt_r2 = scores.mean()
dt_rmse = rmse.mean()

print('dt_r2 =' + str(dt_r2))
print('dt_rmse =' + str(dt_rmse))

df.columns

import xgboost as xgb
xgb=  xgb.XGBRegressor(colsample_bytree = 0.3, learning_rate = 0.1,max_depth = 5, alpha = 10, n_estimators = 1000)

Xtrain = train1[['deviceid','segment','day_of_week','length', 'Sunday/holiday', 'saturday','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip']]
ytrain = train1[['run_time_in_seconds']]

Xtest = test1[['deviceid','segment','day_of_week','length', 'Sunday/holiday', 'saturday','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip']]
ytest = test1[['run_time_in_seconds']]

xgb.fit(Xtrain,ytrain)
pred_xg = xgb.predict(Xtest) 
rmse = np.sqrt(mean_squared_error(ytest, pred_xg)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_xg)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_xg)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_xg)
print("r2 (1): %f" % (r2))

import lightgbm as lgb

params = {
    'task': 'train', 
    'boosting': 'gbdt',
    'objective': 'regression',
    'num_leaves': 10,
    'learnnig_rage': 0.05,
    'metric': {'l2','l1'},
    'verbose': 0
}
Xtrain = train1[['deviceid','segment','day_of_week','length', 'Sunday/holiday', 'saturday','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip']]
ytrain = train1[['run_time_in_seconds']]

Xtest = test1[['deviceid','segment','day_of_week','length', 'Sunday/holiday', 'saturday','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip']]
ytest = test1[['run_time_in_seconds']]

lgb_train = lgb.Dataset(Xtrain, ytrain)
lgb_eval = lgb.Dataset(Xtest, ytest, reference=lgb_train)

model = lgb.train(params,
                 train_set=lgb_train,
                 valid_sets=lgb_eval,
                 early_stopping_rounds=30)


pred_lgb = model.predict(Xtest)

rmse = np.sqrt(mean_squared_error(ytest, pred_lgb)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_lgb)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_lgb)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_lgb)
print("r2 (1): %f" % (r2))

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor(n_estimators = 100, random_state = 0)

Xtrain = train1[['deviceid','segment','day_of_week','length', 'Sunday/holiday', 'saturday','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip']]
ytrain = train1[['run_time_in_seconds']]

Xtest = test1[['deviceid','segment','day_of_week','length', 'Sunday/holiday', 'saturday','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip']]
ytest = test1[['run_time_in_seconds']]

rfr.fit(Xtrain,ytrain)
pred_rf = rfr.predict(Xtest) 
rmse = np.sqrt(mean_squared_error(ytest, pred_rf)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_rf)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_rf)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_rf)
print("r2 (1): %f" % (r2))

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

Xtrain = train1[['segment','day_of_week','time_of_day']]
ytrain = train1[['run_time_in_seconds']]

Xtest = test1[['segment','day_of_week','time_of_day',]]
ytest = test1[['run_time_in_seconds']]

lr.fit(Xtrain,ytrain)
pred_lr = lr.predict(Xtest) 
rmse = np.sqrt(mean_squared_error(ytest, pred_lr)) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(ytest, pred_lr)
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(ytest, pred_lr)
print("MAE (1): %f" % (mae)) 


r2 = r2_score(ytest, pred_lr)
print("r2 (1): %f" % (r2))

pred_lr = pred_lr.flatten()
pred_lr

test1.reset_index(drop = True, inplace = True)

pred_xg = pd.Series(pred_xg, name='XGBoost')
pred_lgb = pd.Series(pred_lgb, name='LightGBM')
pred_rf = pd.Series(pred_rf, name='Random forest')
pred_lr = pd.Series(pred_lr, name='Linear Reg')

pred =test1.merge(pred_xg,left_index=True, right_index=True)
pred =pred.merge(pred_lgb,left_index=True, right_index=True)
pred =pred.merge(pred_rf,left_index=True, right_index=True)
pred =pred.merge(pred_lr,left_index=True, right_index=True)

pred_run = pred

pred_run

def download_csv(data,filename):
  filename= filename + '.csv'
  data.to_csv(filename, encoding = 'utf-8-sig',index= False)
  files.download(filename)

download_csv(pred_run,'predicted_running_times')

download_csv(pred_dwell,'predicted_dwell_times')

run_true = pred_run.pivot_table(index='trip_id', columns='segment', values='run_time_in_seconds')

run_true

run_true = run_true.fillna(50)

run_pred = pred_run.pivot_table(index='trip_id', columns='segment', values='XGBoost')
run_pred

run_pred = run_pred.fillna(50)

dwell_true = pred_dwell.pivot_table(index='trip_id', columns='bus_stop', values='dwell_time_in_seconds')
dwell_true

dwell_true = dwell_true.fillna(0)

dwell_pred = pred_dwell.pivot_table(index='trip_id', columns='bus_stop', values='XGBoost')
dwell_pred

dwell_pred = dwell_pred.fillna(0)

true =run_true.merge(dwell_true,left_index=True, right_index=True)
true

pred =run_pred.merge(dwell_pred,left_index=True, right_index=True)
pred

pred.columns

pred['total_pred'] = pred[list(pred.columns)].sum(axis=1)

pred

true['total_pred'] = true[list(true.columns)].sum(axis=1)
true

rmse = np.sqrt(mean_squared_error(true['total_pred'], pred['total_pred'])) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(true['total_pred'],pred['total_pred'])
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(true['total_pred'], pred['total_pred'])
print("MAE (1): %f" % (mae)) 


r2 = r2_score(true['total_pred'], pred['total_pred'])
print("r2 (1): %f" % (r2))

pred_dwell

pred_dwell['DateTime'] = pd.to_datetime(pred_dwell['date'] + ' ' + pred_dwell['arrival_time'])
ref_freq = '15min'
ix = pd.DatetimeIndex(pd.to_datetime(pred_dwell['DateTime'])).floor(ref_freq)
pred_dwell["DateTimeRef"] = ix

pred_run['DateTime'] = pd.to_datetime(pred_run['date'] + ' ' + pred_run['start_time'])
ref_freq = '15min'
ix = pd.DatetimeIndex(pd.to_datetime(pred_run['DateTime'])).floor(ref_freq)
pred_run["DateTimeRef"] = ix

pred_run

path_lstm= '/content/drive/Shareddrives/MSc - Shiveswarran/Predicted values/purelstm.csv'
path_convlstm= '/content/drive/Shareddrives/MSc - Shiveswarran/Predicted values/convlstm.csv'

convlstm = pd.read_csv(path_convlstm)
lstm = pd.read_csv(path_lstm)

convlstm

convlstm = convlstm.set_index('Datetime')
lstm = lstm.set_index('Datetime')

convlstm.index = pd.to_datetime(convlstm.index)
lstm.index = pd.to_datetime(lstm.index)

date_list = convlstm.index.tolist()
pred_run= pred_run[pred_run['DateTimeRef'].isin(date_list)]
pred_run

date_list = lstm.index.tolist()
pred_run = pred_run[pred_run['DateTimeRef'].isin(date_list)]
pred_run

pred_run['covlstm'] =''

for segment, group in pred_run.groupby('segment'):
  for row_index, row in group.iterrows():
    date_time = row['DateTimeRef'] 
    pred_run.at[row_index,'covlstm'] = convlstm.loc[date_time,str(segment)]

pred_run

pred_run['lstm'] =''

for segment, group in pred_run.groupby('segment'):
  for row_index, row in group.iterrows():
    date_time = row['DateTimeRef'] 
    pred_run.at[row_index,'lstm'] = lstm.loc[date_time,str(segment)]

pred_run

download_csv(pred_run,'predicted_running_times')

print('results for lstm:')
rmse = np.sqrt(mean_squared_error(pred_run['run_time_in_seconds'], pred_run['lstm'])) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(pred_run['run_time_in_seconds'],pred_run['lstm'])
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(pred_run['run_time_in_seconds'], pred_run['lstm'])
print("MAE (1): %f" % (mae)) 


r2 = r2_score(pred_run['run_time_in_seconds'], pred_run['lstm'])
print("r2 (1): %f" % (r2))

print('results for convlstm:')
rmse = np.sqrt(mean_squared_error(pred_run['run_time_in_seconds'], pred_run['covlstm'])) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(pred_run['run_time_in_seconds'],pred_run['covlstm'])
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(pred_run['run_time_in_seconds'], pred_run['covlstm'])
print("MAE (1): %f" % (mae)) 


r2 = r2_score(pred_run['run_time_in_seconds'], pred_run['covlstm'])
print("r2 (1): %f" % (r2))

print('results for LightGBM:')
rmse = np.sqrt(mean_squared_error(pred_run['run_time_in_seconds'], pred_run['LightGBM'])) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(pred_run['run_time_in_seconds'],pred_run['LightGBM'])
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(pred_run['run_time_in_seconds'], pred_run['LightGBM'])
print("MAE (1): %f" % (mae)) 


r2 = r2_score(pred_run['run_time_in_seconds'], pred_run['LightGBM'])
print("r2 (1): %f" % (r2))

print('results for XGBoost:')
rmse = np.sqrt(mean_squared_error(pred_run['run_time_in_seconds'], pred_run['XGBoost'])) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(pred_run['run_time_in_seconds'],pred_run['XGBoost'])
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(pred_run['run_time_in_seconds'], pred_run['XGBoost'])
print("MAE (1): %f" % (mae)) 


r2 = r2_score(pred_run['run_time_in_seconds'], pred_run['XGBoost'])
print("r2 (1): %f" % (r2))

run_true = pred_run_f.pivot_table(index='trip_id', columns='segment', values='run_time_in_seconds')
run_true = run_true.fillna(50)

run_pred = pred_run_f.pivot_table(index='trip_id', columns='segment', values='cnn_lstm')
run_pred = run_pred.fillna(50)

dwell_true = pred_dwell_f.pivot_table(index='trip_id', columns='bus_stop', values='dwell_time_in_seconds')
dwell_true = dwell_true.fillna(0)

dwell_pred = pred_dwell_f.pivot_table(index='trip_id', columns='bus_stop', values='cnn_lstm')
dwell_pred = dwell_pred.fillna(0)

true =run_true.merge(dwell_true,left_index=True, right_index=True)
pred =run_pred.merge(dwell_pred,left_index=True, right_index=True)

pred['total_pred'] = pred[list(pred.columns)].sum(axis=1)
true['total_true'] = true[list(true.columns)].sum(axis=1)

rmse = np.sqrt(mean_squared_error(true['total_true'], pred['total_pred'])) 

print("RMSE (1): %f" % (rmse))

mape = mean_absolute_percentage_error(true['total_true'],pred['total_pred'])
print("MAPE (1): %f" % (mape)) 

mae = mean_absolute_error(true['total_true'], pred['total_pred'])
print("MAE (1): %f" % (mae)) 


r2 = r2_score(true['total_true'], pred['total_pred'])
print("r2 (1): %f" % (r2))

download_csv(pred_run_f,'predicted_running_times')

download_csv(pred_dwell_f,'predicted_dwell_times')

def correlation_heatmap(train):
    correlations = train.corr()

    fig, ax = plt.subplots(figsize=(10,10))
    sns.heatmap(correlations, vmax=1.0, center=0, fmt='.2f', cmap="YlGnBu",
                square=True, linewidths=.5, annot=True, cbar_kws={"shrink": .70}
                )
    plt.show();
    
correlation_heatmap( run_times[['deviceid','segment','day_of_week','length','weekday/end','time_of_day','rt(t-1)','rt(t-2)','rt(w-1)','rt(w-2)','rt(w-3)','rt(n-1)','rt(n-2)','rt(n-3)','temp', 'precip', 'holiday','run_time_in_seconds']])

correlation_heatmap(dwell_times[['deviceid','bus_stop','day_of_week','weekday/end','time_of_day','dt(t-1)','dt(t-2)','dt(w-1)','dt(w-2)','dt(w-3)','dt(n-1)','dt(n-2)','dt(n-3)','temp', 'precip', 'holiday','dwell_time_in_seconds']])